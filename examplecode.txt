busystatus.ts
import { Category, BusyPeriod, BusyStatus } from '@/types';

const GEMINI_API_KEY = 'AIzaSyDDQctactr5MkMnW2xvwmGm3qM9GgXRfeQ';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

export function getBusyStatusColor(status: BusyStatus): string {
  switch (status) {
    case 'quiet':
      return '#10B981'; // Green
    case 'moderate':
      return '#F59E0B'; // Yellow
    case 'busy':
      return '#EF4444'; // Red
    default:
      return '#9CA3AF'; // Default gray
  }
}

export function getBusyStatusText(status: BusyStatus): string {
  switch (status) {
    case 'quiet':
      return 'Quiet';
    case 'moderate':
      return 'Moderate';
    case 'busy':
      return 'Busy';
    default:
      return 'Unknown';
  }
}

export function getBusyStatusEmoji(status: BusyStatus): string {
  switch (status) {
    case 'quiet':
      return '😌';  // Relaxed face
    case 'moderate':
      return '🙂';  // Slightly smiling face
    case 'busy':
      return '😰';  // Anxious face with sweat
    default:
      return '❓';  // Question mark
  }
}

export function getCurrentBusyStatus(location: { busySchedule: BusyPeriod[] }): { status: BusyStatus; estimatedPeople: number } | null {
  if (!location?.busySchedule?.length) return null;
  
  const now = new Date();
  const currentHour = now.getHours();
  
  // Find the current hour in the busy schedule
  const currentPeriod = location.busySchedule.find(period => period.hour === currentHour);
  
  if (!currentPeriod) return null;
  
  return {
    status: currentPeriod.status,
    estimatedPeople: currentPeriod.estimatedPeople
  };
}

export async function classifyWithGemini(query: string, categories: Category[]): Promise<string | null> {
  const categoryList = categories.map(cat => 
    `- ${cat.name} (${cat.id}): ${cat.keywords.join(', ')}`
  ).join('\n');

  const prompt = `You are a location category classifier. Given a search query, determine which category it best fits into.

Available categories:
${categoryList}

Search query: "${query}"

Rules:
1. Return ONLY the category ID (e.g., "grocery", "restaurant", "library")
2. If the query clearly matches a category, return that category ID
3. If the query doesn't clearly match any category, return "null"
4. Be strict - only return a category if there's a clear match

Response (category ID only):`;

  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.1,
          maxOutputTokens: 50,
        }
      })
    });

    if (!response.ok) {
      console.error('Gemini API error:', response.status);
      return null;
    }

    const data = await response.json();
    const result = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim().toLowerCase();
    
    // Validate the result is a valid category ID
    const validCategory = categories.find(cat => cat.id === result);
    return validCategory ? result : null;
    
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    return null;
  }
}
gemini.ts
import { Category } from '@/types';

// Use environment variables in production
const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY || 'AIzaSyD1deaVQuj2ws5dL6bA5cJfOIttqtNrbA4';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

export async function classifyWithGemini(query: string, categories: Category[]): Promise<string | null> {
  if (!query.trim()) return null;
  
  console.log('Classifying query with Gemini:', query);
  
  const categoryList = categories.map(cat => 
    `- ${cat.name} (${cat.id}): ${cat.keywords.join(', ')}`
  ).join('\n');

  const prompt = `You are a location category classifier. Given a search query, determine which category it best fits into.

Available categories:
${categoryList}

Search query: "${query}"

Rules:
1. Return ONLY the category ID (e.g., "grocery", "restaurant", "library")
2. If the query clearly matches a category, return that category ID
3. If the query doesn't clearly match any category, return "null"
4. Be strict - only return a category if there's a clear match

Response (category ID only):`;

  try {
    console.log('Sending request to Gemini API...');
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.1,
          maxOutputTokens: 50,
        }
      })
    });

    const responseData = await response.json();
    console.log('Gemini API response:', responseData);

    if (!response.ok) {
      console.error('Gemini API error:', {
        status: response.status,
        statusText: response.statusText,
        error: responseData
      });
      return null;
    }

    // Extract the response text
    const responseText = responseData.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
    console.log('Extracted response text:', responseText);

    if (!responseText || responseText.toLowerCase() === 'null') {
      return null;
    }
    const result = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim().toLowerCase();
    
    // Validate the result is a valid category ID
    // Check if the response matches any of our category IDs
    const matchedCategory = categories.find(cat => 
      cat.id.toLowerCase() === result.toLowerCase()
    );

    if (matchedCategory) {
      console.log('Matched category:', matchedCategory.id);
      return matchedCategory.id;
    }

    console.log('Response did not match any category:', result);
    return null;
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    return null;
  }
}
types.ts
export type BusyStatus = 'quiet' | 'moderate' | 'busy';

export interface BusyPeriod {
  hour: number; // 0-23
  status: BusyStatus;
  estimatedPeople: number;
}

export interface Location {
  id: string;
  name: string;
  category: string;
  emoji: string;
  lat: number;
  lng: number;
  address: string;
  busySchedule: BusyPeriod[];
  description?: string;
}

export interface Category {
  id: string;
  name: string;
  emoji: string;
  keywords: string[];
  color: string;
}

export interface ActivityChartData {
  hour: string;
  people: number;
  status: BusyStatus;
}

// NEW: Gemini API types
export interface GeminiClassificationRequest {
  query: string;
  categories: Category[];
}

export interface GeminiClassificationResponse {
  categoryId: string | null;
  confidence: number;
  reasoning?: string;
}
categories.ts 
import { Category } from '@/types';

export const categories: Category[] = [
  {
    id: 'grocery',
    name: 'Grocery Stores',
    emoji: '🛒',
    keywords: ['walmart', 'grocery', 'supermarket', 'food', 'metro', 'loblaws', 'no frills'],
    color: '#10B981', // Green
  },
  {
    id: 'restaurant',
    name: 'Restaurants',
    emoji: '🍽️',
    keywords: ['restaurant', 'food', 'dining', 'cafe', 'eatery', 'mcdonald', 'tim hortons', 'pizza', 'rex den'],
    color: '#F59E0B', // Amber
  },
  {
    id: 'barber',
    name: 'Barber Shops',
    emoji: '💇',
    keywords: ['barber', 'salon', 'haircut', 'hair', 'grooming'],
    color: '#8B5CF6', // Purple
  },
  {
    id: 'coffee',
    name: 'Coffee Shops',
    emoji: '☕',
    keywords: ['coffee', 'starbucks', 'cafe', 'tim hortons', 'second cup', 'chatime', 'tea'],
    color: '#78350F', // Brown
  },
  {
    id: 'pharmacy',
    name: 'Pharmacies',
    emoji: '💊',
    keywords: ['pharmacy', 'shoppers', 'drug', 'rexall', 'medicine'],
    color: '#DC2626', // Red
  },
  {
    id: 'gym',
    name: 'Gyms & Sports',
    emoji: '💪',
    keywords: ['gym', 'fitness', 'workout', 'goodlife', 'planet fitness', 'pan am', 'tpasc', 'sports', 'athletics'],
    color: '#059669', // Emerald
  },
  {
    id: 'library',
    name: 'Libraries & Study',
    emoji: '📚',
    keywords: ['library', 'study', 'books', 'research', 'quiet', 'reading'],
    color: '#3B82F6', // Blue
  },
  {
    id: 'nature',
    name: 'Nature & Trails',
    emoji: '🌲',
    keywords: ['trail', 'valley', 'nature', 'park', 'outdoor', 'highland', 'creek', 'walk'],
    color: '#16A34A', // Forest Green
  },
  {
    id: 'recreation',
    name: 'Recreation',
    emoji: '🎯',
    keywords: ['recreation', 'dance', 'studio', 'activity', 'club', 'fun'],
    color: '#EC4899', // Pink
  },
];

export function findCategoryByKeyword(query: string): Category | undefined {
  const lowerQuery = query.toLowerCase();
  return categories.find(cat => 
    cat.keywords.some(keyword => lowerQuery.includes(keyword))
  );
}
locations.ts
import { Location, BusyPeriod } from '@/types';

// Helper to generate realistic busy schedules
function generateBusySchedule(peakHours: number[], type: 'grocery' | 'restaurant' | 'barber' | 'coffee' | 'pharmacy' | 'gym' | 'library' | 'nature' | 'recreation'): BusyPeriod[] {
  const schedule: BusyPeriod[] = [];
  
  for (let hour = 0; hour < 24; hour++) {
    let status: 'quiet' | 'moderate' | 'busy' = 'quiet';
    let estimatedPeople = 5;
    
    if (peakHours.includes(hour)) {
      status = 'busy';
      estimatedPeople = type === 'grocery' ? 45 : type === 'restaurant' ? 35 : type === 'library' ? 60 : type === 'gym' ? 50 : type === 'nature' ? 15 : 25;
    } else if (Math.abs(peakHours.find(p => Math.abs(p - hour) <= 1) ?? -10 - hour) <= 1) {
      status = 'moderate';
      estimatedPeople = type === 'grocery' ? 25 : type === 'restaurant' ? 20 : type === 'library' ? 35 : type === 'gym' ? 30 : type === 'nature' ? 8 : 15;
    } else {
      estimatedPeople = type === 'grocery' ? 8 : type === 'restaurant' ? 5 : type === 'library' ? 10 : type === 'gym' ? 8 : type === 'nature' ? 3 : 3;
    }
    
    schedule.push({ hour, status, estimatedPeople });
  }
  
  return schedule;
}

export const locations: Location[] = [
  // ========== UTSC CAMPUS LOCATIONS (NEW) ==========
  
  // UTSC Library
  {
    id: 'utsc-library',
    name: 'UTSC Library',
    category: 'library',
    emoji: '📚',
    lat: 43.7841,
    lng: -79.1871,
    address: '1265 Military Trail, Scarborough',
    description: 'World-class collection of books, study nooks, individual study rooms, printing facilities, and mindfulness space under the stairs',
    busySchedule: generateBusySchedule([10, 11, 14, 15, 16, 17, 18], 'library'),
  },
  
  // Valley Land Trail
  {
    id: 'valley-trail',
    name: 'Valley Land Trail',
    category: 'nature',
    emoji: '🌲',
    lat: 43.7835,
    lng: -79.1880,
    address: 'UTSC Campus - Valley Access',
    description: '500m accessible trail to Highland Creek Valley with charging stations, LED lighting, lookout points. Great for wildlife spotting including deer!',
    busySchedule: generateBusySchedule([12, 13, 16, 17], 'nature'),
  },
  
  // Highland Creek Valley
  {
    id: 'highland-creek',
    name: 'Highland Creek Valley',
    category: 'nature',
    emoji: '🏞️',
    lat: 43.7825,
    lng: -79.1890,
    address: 'Highland Creek Valley - UTSC Back Campus',
    description: 'Beautiful natural valley, photographer\'s paradise with abundant wildlife. Access to soccer field, rugby diamond, and cricket ground',
    busySchedule: generateBusySchedule([14, 15, 16, 17], 'nature'),
  },
  
  // Toronto Pan Am Sports Centre
  {
    id: 'tpasc',
    name: 'Toronto Pan Am Sports Centre',
    category: 'gym',
    emoji: '🏊',
    lat: 43.7848,
    lng: -79.1883,
    address: '875 Morningside Ave, Scarborough',
    description: '365,000 sq ft facility with 2 Olympic pools, diving tank, indoor track, weight rooms, climbing wall, and flexible gym space',
    busySchedule: generateBusySchedule([7, 8, 17, 18, 19], 'gym'),
  },
  
  // Dance Studio
  {
    id: 'dance-studio',
    name: 'Dance Studio',
    category: 'recreation',
    emoji: '💃',
    lat: 43.7843,
    lng: -79.1869,
    address: 'UTSC Student Centre',
    description: 'Liberating space to meet different students, make friends, and discover pure talent through dancing',
    busySchedule: generateBusySchedule([16, 17, 18, 19], 'recreation'),
  },
  
  // Group Fitness Classes
  {
    id: 'fitness-classes',
    name: 'Group Fitness Classes',
    category: 'gym',
    emoji: '🥋',
    lat: 43.7846,
    lng: -79.1875,
    address: 'UTSC Athletic Centre',
    description: 'Kickboxing, Karate, MMA conditioning, and various martial arts programs',
    busySchedule: generateBusySchedule([17, 18, 19, 20], 'gym'),
  },
  
  // Rex's Den
  {
    id: 'rexs-den',
    name: "Rex's Den",
    category: 'restaurant',
    emoji: '🍔',
    lat: 43.7844,
    lng: -79.1868,
    address: 'UTSC Student Centre',
    description: 'Popular campus eatery and hangout spot for students between classes',
    busySchedule: generateBusySchedule([12, 13, 17, 18], 'restaurant'),
  },
  
  // Chatime UTSC
  {
    id: 'chatime-utsc',
    name: 'Chatime',
    category: 'coffee',
    emoji: '🧋',
    lat: 43.7842,
    lng: -79.1870,
    address: 'UTSC Student Centre',
    description: 'Super quick bubble tea that hits the spot! Great energy boost after long lectures',
    busySchedule: generateBusySchedule([12, 13, 14, 15, 16], 'coffee'),
  },
  
  // Tim Hortons UTSC
  {
    id: 'timhortons-utsc',
    name: 'Tim Hortons UTSC',
    category: 'coffee',
    emoji: '☕',
    lat: 43.7838,
    lng: -79.1872,
    address: 'UTSC Campus',
    description: 'Campus coffee spot - can have long lineups but great coffee',
    busySchedule: generateBusySchedule([8, 9, 12, 13], 'coffee'),
  },
  
  // Starbucks UTSC
  {
    id: 'starbucks-utsc',
    name: 'Starbucks UTSC',
    category: 'coffee',
    emoji: '☕',
    lat: 43.7848,
    lng: -79.1878,
    address: 'UTSC Campus',
    description: 'Premium coffee on campus - popular but can have long lines',
    busySchedule: generateBusySchedule([8, 9, 10, 15], 'coffee'),
  },
  
  // Miller Lash House
  {
    id: 'miller-lash',
    name: 'Miller Lash House',
    category: 'nature',
    emoji: '🏛️',
    lat: 43.7837,
    lng: -79.1865,
    address: 'UTSC Campus',
    description: 'Picturesque heritage building, photographer\'s treat with beautiful architecture',
    busySchedule: generateBusySchedule([11, 12, 14, 15], 'nature'),
  },
  
  // ========== OFF-CAMPUS LOCATIONS ==========
  
  // Grocery Stores
  {
    id: 'walmart-1',
    name: 'Walmart Supercentre',
    category: 'grocery',
    emoji: '🛒',
    lat: 43.7850,
    lng: -79.1950,
    address: '4040 Lawrence Ave E, Scarborough',
    description: 'Large supermarket with groceries, clothing, and electronics',
    busySchedule: generateBusySchedule([11, 12, 17, 18], 'grocery'),
  },
  {
    id: 'metro-1',
    name: 'Metro',
    category: 'grocery',
    emoji: '🛒',
    lat: 43.7830,
    lng: -79.1850,
    address: '300 Borough Dr, Scarborough',
    description: 'Quality groceries and fresh produce',
    busySchedule: generateBusySchedule([10, 11, 16, 17], 'grocery'),
  },
  {
    id: 'nofrills-1',
    name: 'No Frills',
    category: 'grocery',
    emoji: '🛒',
    lat: 43.7860,
    lng: -79.1900,
    address: '1571 Sandhurst Cir, Scarborough',
    description: 'Discount grocery store with great prices',
    busySchedule: generateBusySchedule([12, 13, 18, 19], 'grocery'),
  },
  
  // Restaurants
  {
    id: 'mcdonalds-1',
    name: "McDonald's",
    category: 'restaurant',
    emoji: '🍔',
    lat: 43.7855,
    lng: -79.1945,
    address: '4040 Lawrence Ave E, Scarborough',
    description: 'Fast food restaurant',
    busySchedule: generateBusySchedule([12, 13, 18, 19], 'restaurant'),
  },
  {
    id: 'pizza-1',
    name: 'Pizza Nova',
    category: 'restaurant',
    emoji: '🍕',
    lat: 43.7855,
    lng: -79.1890,
    address: '1571 Sandhurst Cir, Scarborough',
    description: 'Italian pizza and pasta',
    busySchedule: generateBusySchedule([17, 18, 19, 20], 'restaurant'),
  },
  
  // Barber Shops
  {
    id: 'barber-1',
    name: 'Elite Cuts Barbershop',
    category: 'barber',
    emoji: '💇',
    lat: 43.7852,
    lng: -79.1935,
    address: '4040 Lawrence Ave E, Scarborough',
    description: 'Professional haircuts and grooming',
    busySchedule: generateBusySchedule([14, 15, 16, 17], 'barber'),
  },
  {
    id: 'barber-2',
    name: 'Fresh Fade Studio',
    category: 'barber',
    emoji: '💇',
    lat: 43.7835,
    lng: -79.1855,
    address: '300 Borough Dr, Scarborough',
    description: 'Modern cuts and beard trims',
    busySchedule: generateBusySchedule([13, 14, 15, 16], 'barber'),
  },
  
  // Pharmacies
  {
    id: 'shoppers-1',
    name: 'Shoppers Drug Mart',
    category: 'pharmacy',
    emoji: '💊',
    lat: 43.7852,
    lng: -79.1948,
    address: '4040 Lawrence Ave E, Scarborough',
    description: 'Pharmacy and health products',
    busySchedule: generateBusySchedule([12, 13, 17, 18], 'pharmacy'),
  },
  {
    id: 'rexall-1',
    name: 'Rexall',
    category: 'pharmacy',
    emoji: '💊',
    lat: 43.7836,
    lng: -79.1862,
    address: '300 Borough Dr, Scarborough',
    description: 'Prescriptions and wellness products',
    busySchedule: generateBusySchedule([11, 12, 16, 17], 'pharmacy'),
  },
  
  // Gyms
  {
    id: 'gym-1',
    name: 'GoodLife Fitness',
    category: 'gym',
    emoji: '💪',
    lat: 43.7854,
    lng: -79.1955,
    address: '1571 Sandhurst Cir, Scarborough',
    description: 'Full-service fitness center',
    busySchedule: generateBusySchedule([17, 18, 19, 7], 'gym'),
  },
];
activity chart.ts
'use client';

import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';
import { Location, ActivityChartData } from '@/types';
import { getBusyStatusColor } from '@/utils/busyStatus';

interface ActivityChartProps {
  location: Location;
}

export default function ActivityChart({ location }: ActivityChartProps) {
  // Convert busy schedule to chart data
  const chartData: ActivityChartData[] = location.busySchedule.map((period) => ({
    hour: formatHour(period.hour),
    people: period.estimatedPeople,
    status: period.status,
  }));

  // Get current hour for highlighting
  const currentHour = new Date().getHours();

  return (
    <div className="w-full h-full" aria-label={`Activity chart for ${location.name}`}>
      <h3 className="text-xl font-bold mb-2 text-gray-800">
        Typical Busy Times
      </h3>
      <p className="text-sm text-gray-600 mb-4">
        Expected number of people throughout the day
      </p>
      
      <ResponsiveContainer width="100%" height={300}>
        <BarChart 
          data={chartData}
          margin={{ top: 10, right: 10, left: -20, bottom: 20 }}
        >
          <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
          <XAxis 
            dataKey="hour" 
            tick={{ fontSize: 14, fill: '#4B5563' }}
            interval={2}
            label={{ value: 'Time of Day', position: 'insideBottom', offset: -15, style: { fontSize: 14, fill: '#4B5563' } }}
          />
          <YAxis 
            tick={{ fontSize: 14, fill: '#4B5563' }}
            label={{ value: 'People', angle: -90, position: 'insideLeft', style: { fontSize: 14, fill: '#4B5563' } }}
          />
          <Tooltip 
            content={<CustomTooltip />}
            cursor={{ fill: 'rgba(79, 70, 229, 0.1)' }}
          />
          <Bar 
            dataKey="people" 
            radius={[8, 8, 0, 0]}
            maxBarSize={40}
          >
            {chartData.map((entry, index) => (
              <Cell 
                key={`cell-${index}`} 
                fill={getBusyStatusColor(entry.status)}
                opacity={index === currentHour ? 1 : 0.7}
                stroke={index === currentHour ? '#1F2937' : 'none'}
                strokeWidth={index === currentHour ? 2 : 0}
              />
            ))}
          </Bar>
        </BarChart>
      </ResponsiveContainer>
      
      {/* Legend */}
      <div className="mt-4 flex justify-center gap-6 text-sm">
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 rounded" style={{ backgroundColor: '#10B981' }}></div>
          <span className="text-gray-700">😊 Quiet</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 rounded" style={{ backgroundColor: '#F59E0B' }}></div>
          <span className="text-gray-700">🙂 Moderate</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 rounded" style={{ backgroundColor: '#EF4444' }}></div>
          <span className="text-gray-700">😰 Busy</span>
        </div>
      </div>
      
      <p className="text-center text-sm text-gray-500 mt-3">
        Current time highlighted with border
      </p>
    </div>
  );
}

// Custom tooltip for better accessibility
function CustomTooltip({ active, payload }: any) {
  if (active && payload && payload.length) {
    const data = payload[0].payload as ActivityChartData;
    return (
      <div className="bg-white border-2 border-gray-200 rounded-lg p-3 shadow-lg">
        <p className="font-bold text-gray-800">{data.hour}</p>
        <p className="text-gray-700">
          <span className="font-semibold">{data.people}</span> people expected
        </p>
        <p className="text-sm text-gray-600 capitalize">
          Status: {data.status}
        </p>
      </div>
    );
  }
  return null;
}

// Helper function to format hour
function formatHour(hour: number): string {
  if (hour === 0) return '12 AM';
  if (hour === 12) return '12 PM';
  if (hour < 12) return `${hour} AM`;
  return `${hour - 12} PM`;
}
liveclock.tsx

'use client';

import { useEffect, useState } from 'react';

// Helper function to get the current time string (used for initial render)
const getInitialTimeString = () => {
  if (typeof window === 'undefined') return '';
  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes().toString().padStart(2, '0');
  const seconds = now.getSeconds().toString().padStart(2, '0');
  const ampm = hours >= 12 ? 'PM' : 'AM';
  const displayHours = hours % 12 || 12;
  return { displayHours, minutes, seconds, ampm };
};

export default function LiveClock() {
  const [isMounted, setIsMounted] = useState(false);
  const [time, setTime] = useState<Date | null>(null);
  const [showColon, setShowColon] = useState(true);

  // Initialize with the same time on server and client
  useEffect(() => {
    setTime(new Date());
    setIsMounted(true);

    // Update time every second
    const timeInterval = setInterval(() => {
      setTime(new Date());
    }, 1000);

    // Flash colon every 500ms
    const colonInterval = setInterval(() => {
      setShowColon(prev => !prev);
    }, 500);

    return () => {
      clearInterval(timeInterval);
      clearInterval(colonInterval);
    };
  }, []);

  // Don't render anything on the server or during hydration
  if (!isMounted || !time) {
    return (
      <div className="flex items-center justify-center gap-2 bg-white px-6 py-3 rounded-xl shadow-md border-2 border-gray-200">
        <span className="text-sm text-gray-600 font-medium">Current Time:</span>
        <span className="text-2xl font-bold text-gray-900 tabular-nums">
          --:--:--
        </span>
      </div>
    );
  }

  const hours = time.getHours();
  const minutes = time.getMinutes().toString().padStart(2, '0');
  const seconds = time.getSeconds().toString().padStart(2, '0');
  const ampm = hours >= 12 ? 'PM' : 'AM';
  const displayHours = hours % 12 || 12;

  return (
    <div className="flex items-center justify-center gap-2 bg-white px-6 py-3 rounded-xl shadow-md border-2 border-gray-200">
      <span className="text-sm text-gray-600 font-medium">Current Time:</span>
      <span className="text-2xl font-bold text-gray-900 tabular-nums">
        {displayHours}
        <span className={`transition-opacity duration-100 ${showColon ? 'opacity-100' : 'opacity-0'}`}>:</span>
        {minutes}
        <span className={`transition-opacity duration-100 ${showColon ? 'opacity-100' : 'opacity-0'}`}>:</span>
        {seconds}
      </span>
      <span className="text-lg font-semibold text-gray-700">{ampm}</span>
    </div>
  );
}
locationcard.tsx
'use client';

import { Location } from '@/types';
import { getCurrentBusyStatus, getBusyStatusColor, getBusyStatusText, getBusyStatusEmoji } from '@/utils/busyStatus';
import ActivityChart from './ActivityChart';
import { MapPin, Clock, Users, X } from 'lucide-react';

interface LocationCardProps {
  location: Location;
  onClose: () => void;
}

export default function LocationCard({ location, onClose }: LocationCardProps) {
  const currentStatus = getCurrentBusyStatus(location);
  const statusColor = getBusyStatusColor(currentStatus.status);
  const statusText = getBusyStatusText(currentStatus.status);
  const statusEmoji = getBusyStatusEmoji(currentStatus.status);

  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 animate-fade-in"
      onClick={onClose}
      role="dialog"
      aria-labelledby="location-title"
      aria-describedby="location-description"
      aria-modal="true"
    >
      <div 
        className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="sticky top-0 bg-white border-b-2 border-gray-200 p-6 flex justify-between items-start rounded-t-2xl">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-2">
              <span className="text-5xl" role="img" aria-label={location.category}>
                {location.emoji}
              </span>
              <div>
                <h2 id="location-title" className="text-2xl font-bold text-gray-900">
                  {location.name}
                </h2>
                <p className="text-sm text-gray-600 capitalize">
                  {location.category}
                </p>
              </div>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-primary"
            aria-label="Close location details"
          >
            <X className="w-6 h-6 text-gray-600" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Current Status - Large and Prominent */}
          <div 
            className="p-6 rounded-xl border-4 text-center"
            style={{ 
              backgroundColor: `${statusColor}15`,
              borderColor: statusColor 
            }}
          >
            <p className="text-sm font-semibold text-gray-600 uppercase tracking-wide mb-2">
              Right Now
            </p>
            <div className="flex items-center justify-center gap-3 mb-3">
              <span className="text-6xl" role="img" aria-label={`Status: ${statusText}`}>
                {statusEmoji}
              </span>
              <div className="text-left">
                <p 
                  className="text-3xl font-bold"
                  style={{ color: statusColor }}
                >
                  {statusText}
                </p>
                <p className="text-xl text-gray-700 flex items-center gap-2">
                  <Users className="w-5 h-5" />
                  ~{currentStatus.estimatedPeople} people
                </p>
              </div>
            </div>
          </div>

          {/* Location Details */}
          <div className="space-y-3">
            <div className="flex items-start gap-3 text-gray-700">
              <MapPin className="w-6 h-6 mt-1 flex-shrink-0 text-primary" aria-hidden="true" />
              <div>
                <p className="font-semibold text-lg">Address</p>
                <p id="location-description" className="text-base">{location.address}</p>
              </div>
            </div>

            {location.description && (
              <div className="flex items-start gap-3 text-gray-700">
                <Clock className="w-6 h-6 mt-1 flex-shrink-0 text-primary" aria-hidden="true" />
                <div>
                  <p className="font-semibold text-lg">About</p>
                  <p className="text-base">{location.description}</p>
                </div>
              </div>
            )}
          </div>

          {/* Activity Chart */}
          <div className="pt-4 border-t-2 border-gray-200">
            <ActivityChart location={location} />
          </div>

          {/* Accessibility Note */}
          <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-4 text-center">
            <p className="text-sm text-blue-800">
              💡 <strong>Tip:</strong> Visit during <span className="font-semibold">quiet times</span> (shown in green) for a more comfortable experience
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
map.tsx
'use client';

import { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import { Location } from '@/types';
import { getCurrentBusyStatus, getBusyStatusColor } from '@/utils/busyStatus';
import { useEffect, useState } from 'react';

// Custom component for the valley label
function ValleyLabel({ position, zoomThreshold = 16 }: { position: [number, number], zoomThreshold?: number }) {
  const map = useMap();
  const [isVisible, setIsVisible] = useState(false);

  useMapEvents({
    zoomend: () => {
      setIsVisible(map.getZoom() >= zoomThreshold);
    },
    load: () => {
      setIsVisible(map.getZoom() >= zoomThreshold);
    }
  });

  if (!isVisible) return null;

  return (
    <div
      className="valley-label"
      style={{
        position: 'absolute',
        left: '50%',
        top: '50%',
        transform: 'translate(-50%, -50%)',
        zIndex: 1000,
        pointerEvents: 'none',
      }}
    >
      <div 
        style={{
          backgroundColor: 'rgba(16, 185, 129, 0.2)',
          color: '#065f46',
          padding: '8px 16px',
          borderRadius: '20px',
          border: '2px solid #10b981',
          fontWeight: 'bold',
          fontSize: '16px',
          whiteSpace: 'nowrap',
          boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
        }}
      >
        🌿 UTSC Valley
      </div>
    </div>
  );
}

interface MapProps {
  locations: Location[];
  onLocationClick: (location: Location) => void;
  center?: [number, number];
  zoom?: number;
}

// Component to update map view when locations change
function MapUpdater({ locations }: { locations: Location[] }) {
  const map = useMap();
  
  useEffect(() => {
    if (locations.length > 0) {
      const bounds = L.latLngBounds(
        locations.map(loc => [loc.lat, loc.lng] as [number, number])
      );
      map.fitBounds(bounds, { padding: [50, 50], maxZoom: 15 });
    }
  }, [locations, map]);
  
  return null;
}

// Custom marker icon creator
function createCustomIcon(location: Location): L.DivIcon {
  const currentStatus = getCurrentBusyStatus(location);
  const color = getBusyStatusColor(currentStatus?.status || 'moderate');
  
  return L.divIcon({
    html: `
      <div style="position: relative; width: 40px; height: 40px;" data-location-name="${location.name}">
        <div style="
          position: absolute;
          top: 0;
          left: 0;
          width: 40px;
          height: 40px;
          background-color: ${color};
          border: 3px solid white;
          border-radius: 50%;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 20px;
        ">
          ${location.emoji}
        </div>
        <div style="
          position: absolute;
          bottom: -8px;
          left: 50%;
          transform: translateX(-50%);
          width: 0;
          height: 0;
          border-left: 8px solid transparent;
          border-right: 8px solid transparent;
          border-top: 8px solid ${color};
          filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.2));
        "></div>
      </div>
    `,
    className: 'custom-marker',
    iconSize: [40, 48],
    iconAnchor: [20, 48],
    popupAnchor: [0, -48],
  });
}

export default function Map({ 
  locations, 
  onLocationClick,
  center = [43.7843, -79.1874], // UTSC coordinates
  zoom = 15 
}: MapProps) {
  return (
    <div className="w-full h-full rounded-xl overflow-hidden shadow-lg border-2 border-gray-200 relative">
      
      <MapContainer
        center={center}
        zoom={zoom}
        style={{ height: '100%', width: '100%' }}
        zoomControl={true}
        scrollWheelZoom={true}
        aria-label="Interactive map showing nearby locations"
      >
        {/* Standard OpenStreetMap with natural features */}
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        
        {/* Optional: Add a subtle highlight over the valley area */}
        <TileLayer
          url="https://tiles.stadiamaps.com/tiles/stamen_toner_hybrid/{z}/{x}/{y}{r}.png"
          opacity={0.1}
          zIndex={1}
        />

        {locations.map((location) => {
          const currentStatus = getCurrentBusyStatus(location) || { 
            status: 'moderate' as const, 
            estimatedPeople: 0 
          };
          
          return (
            <Marker
              key={location.id}
              position={[location.lat, location.lng]}
              icon={createCustomIcon(location)}
              eventHandlers={{
                mouseover: (e) => {
                  e.target.openPopup();
                },
              }}
              aria-label={`${location.name} - ${currentStatus.status}`}
            >
              <Popup closeButton={false} className="custom-popup">
                <div className="text-center p-3 min-w-[200px]">
                  <p className="font-bold text-lg mb-1 flex items-center justify-center gap-2">
                    <span className="text-2xl">{location.emoji}</span>
                    {location.name}
                  </p>
                  <p className="text-sm text-gray-600 mb-2">
                    {location.address}
                  </p>
                  <p className="text-sm font-semibold mb-3" style={{ color: getBusyStatusColor(currentStatus.status) }}>
                    Now: {currentStatus.status} ({currentStatus.estimatedPeople} people)
                  </p>
                  <button
                    onClick={() => onLocationClick(location)}
                    className="w-full px-4 py-2 bg-primary text-white rounded-lg text-sm font-medium hover:bg-opacity-90 transition-colors shadow-md hover:shadow-lg"
                  >
                    📊 More Details
                  </button>
                </div>
              </Popup>
            </Marker>
          );
        })}
        
        <MapUpdater locations={locations} />
      </MapContainer>
    </div>
  );
}
searchbar.tsx